package com.progressoft.jip.usecase.impl;

import java.util.Objects;

import com.progressoft.jip.entity.DraftPageEntity;
import com.progressoft.jip.entity.PageEntity;
import com.progressoft.jip.entity.view.DraftPageView;
import com.progressoft.jip.entity.view.PageView;
import com.progressoft.jip.entity.view.SiteView;
import com.progressoft.jip.repository.DraftPageRepository;
import com.progressoft.jip.repository.PageRepository;
import com.progressoft.jip.repository.SiteRepository;
import com.progressoft.jip.usecase.PageUseCase;
import com.progressoft.jip.usecase.impl.exception.CannotBeFindAnyPagesException;
import com.progressoft.jip.usecase.impl.exception.LoadPageContentException;
import com.progressoft.jip.usecase.impl.exception.LoadSiteContentException;
import com.progressoft.jip.usecase.impl.exception.PageIsNotPublishedException;
import com.progressoft.jip.usecase.impl.exception.PageNotFoundException;
import com.progressoft.jip.usecase.impl.exception.PageUrlIsAlreadyExistException;

public class PageUseCaseImpl implements PageUseCase {

	private static final String FORWORD_SLASH = "/";

	private PageRepository pageRepository;
	private SiteRepository siteRepository;
	private DraftPageRepository draftPageRepository;

	public void setDraftPageRepository(DraftPageRepository draftPageRepository) {
		this.draftPageRepository = draftPageRepository;
	}

	public void setSiteRepository(SiteRepository siteRepository) {
		this.siteRepository = siteRepository;
	}

	public void setPageRepository(PageRepository pageRepository) {
		this.pageRepository = pageRepository;
	}

	@Override
	public PageView loadPageContent(String siteUrl, String pageUrl) {
		PageView pageView = pageRepository.findBypageUrl(FORWORD_SLASH + pageUrl);
		if (Objects.isNull(pageView) || !(pageView.getSiteId().getSiteUrl().equals(FORWORD_SLASH + siteUrl)))
			throw new LoadPageContentException();
		if (!pageView.getIsPublish())
			throw new PageIsNotPublishedException();
		return pageView;
	}

	@Override
	public void addPage(PageView pageView, Integer siteId) {
		if (Objects.nonNull(pageRepository.findBypageUrl(pageView.getPageUrl())))
			throw new PageUrlIsAlreadyExistException();
		else {
			PageEntity pageEntity = new PageEntity();
			pageEntity.setPageUrl(pageView.getPageUrl());
			pageEntity.setPageTitle(pageView.getPageTitle());
			pageEntity.setPageContent(pageView.getPageContent());
			pageEntity.setSeo(pageView.getSeo());
			pageEntity.setHtml(true);
			pageEntity.setSiteId(siteRepository.findOne(siteId));
			pageRepository.save(pageEntity);
		}
	}
	
	

	@Override
	public Object findOnePageBypageUrl(String pageUrl) {
		PageView pageView = pageRepository.findBypageUrl(pageUrl);
		DraftPageEntity draftPageEntity = draftPageRepository.findByPublishedPage(pageView);
		if (Objects.nonNull(draftPageEntity))
			return draftPageEntity;
		return pageView;
	}

	@Override
	public Iterable<PageEntity> getAllPages() {
		Iterable<PageEntity> allPages = pageRepository.findAll();
		if (Objects.isNull(allPages))
			throw new CannotBeFindAnyPagesException();
		return allPages;
	}

	@Override
	public void editPage(DraftPageView draftPageView, Integer siteId, String url) {
		if (Objects.nonNull(pageRepository.findBypageUrl(draftPageView.getPageUrl()))) {
			DraftPageEntity draftPageEntity = inilaizeDraftPage(draftPageView, siteId, draftPageView.getPageUrl());
			draftPageRepository.save(draftPageEntity);
		}
		if (Objects.nonNull(draftPageRepository.findByPublishedPage(pageRepository.findOne(url)))) {
			draftPageRepository.delete(draftPageRepository.findByPublishedPage(pageRepository.findBypageUrl(url)));
			DraftPageEntity draftPageEntity = inilaizeDraftPage(draftPageView, siteId, url);
			draftPageRepository.save(draftPageEntity);
		}
	}

	@Override
	public void deletePage(String pageUrl) {
		if (Objects.isNull(pageRepository.findBypageUrl(pageUrl)))
			throw new PageNotFoundException();
		else
			pageRepository.delete(pageUrl);
	}

	@Override
	public Iterable<PageEntity> loadAllPagesBySiteId(Integer siteId) {
		if (siteId == 0)
			return pageRepository.findAll();
		return pageRepository.findBySiteId(siteRepository.findOne(siteId));
	}

	@Override
	public PageView loadLandingPage(String siteUrl) {
		SiteView siteView = siteRepository.findBySiteUrl(FORWORD_SLASH + siteUrl);
		if (Objects.isNull(siteView))
			throw new LoadSiteContentException();
		return siteView.getLandingPage();
	}

	@Override
	public void publishPage(String pageUrl, Integer siteId) {
		if (Objects.nonNull(pageRepository.findOne(pageUrl))) {
			PageEntity pageEntity = pageRepository.findOne(pageUrl);
			pageEntity.setSiteId(siteRepository.findOne(siteId));
			pageEntity.setPublish(true);
			pageRepository.save(pageEntity);
		}
		if (Objects.nonNull(draftPageRepository.findOne(pageUrl))) {
			DraftPageEntity draftPageEntity = draftPageRepository.findOne(pageUrl);
			PageEntity pageEntity = pageRepository.findOne(draftPageEntity.getPublishedPage().getPageUrl());
			pageEntity.setPageTitle(draftPageEntity.getPageTitle());
			pageEntity.setPageContent(draftPageEntity.getPageContent());
			pageEntity.setSeo(draftPageEntity.getSeo());
			pageEntity.setPageUrl(draftPageEntity.getPageUrl());
			pageEntity.setPublish(true);
			pageEntity.setPageUrl(draftPageEntity.getPageUrl());
			pageEntity.setSiteId(siteRepository.findOne(draftPageEntity.getSiteId().getSiteId()));
			pageRepository.save(pageEntity);
			draftPageRepository.delete(draftPageEntity);
		}
	}

	private DraftPageEntity inilaizeDraftPage(DraftPageView draftPageView, Integer siteId, String pageUrl) {
		DraftPageEntity draftPageEntity = new DraftPageEntity();
		draftPageEntity.setIsLandingPage(draftPageView.getIsLandingPage());
		draftPageEntity.setPageContent(draftPageView.getPageContent());
		draftPageEntity.setPageTitle(draftPageView.getPageTitle());
		draftPageEntity.setPageUrl(draftPageView.getPageUrl());
		draftPageEntity.setPublishedPage(pageRepository.findOne(pageUrl));
		draftPageEntity.setSiteId(siteRepository.findOne(siteId));
		draftPageEntity.setSeo(draftPageView.getSeo());
		return draftPageEntity;
	}

}
