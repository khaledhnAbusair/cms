package com.progressoft.jip.usecase.impl;

import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Objects;

import javax.annotation.PostConstruct;

import com.progressoft.jip.entity.PageEntity;
import com.progressoft.jip.entity.SiteEntity;
import com.progressoft.jip.entity.view.SiteView;
import com.progressoft.jip.repository.PageRepository;
import com.progressoft.jip.repository.SiteRepository;
import com.progressoft.jip.usecase.SiteUseCase;
import com.progressoft.jip.usecase.impl.exception.CannotBeFindAnySitesException;
import com.progressoft.jip.usecase.impl.exception.PageNotFoundException;
import com.progressoft.jip.usecase.impl.exception.SiteUrlIsAlreadyExistException;
import com.progressoft.jip.usecase.impl.exception.SiteNotfoundException;

public class SiteUseCaseImpl implements SiteUseCase {

	private static final String DEFAULT_PAGE = "/Welcome";
	private SiteRepository siteRepository;
	private PageRepository pageRepository;

	public void setPageRepository(PageRepository pageRepository) {
		this.pageRepository = pageRepository;
	}

	public void setSiteRepository(SiteRepository siteRepository) {
		this.siteRepository = siteRepository;
	}

	@Override
	public Iterable<SiteEntity> getAllSites() {
		if (Objects.isNull(siteRepository.findAll())) {
			throw new CannotBeFindAnySitesException();
		}
		return siteRepository.findAll();
	}

	@Override
	public SiteView findOneSiteBysiteId(Integer siteId) {
		if (Objects.isNull(siteRepository.findOne(siteId))) {
			throw new SiteNotfoundException();
		} else {
			return siteRepository.findOne(siteId);
		}
	}

	@Override
	public void editSite(SiteView siteView, String pageUrl) {
		if (Objects.isNull(siteRepository.findOne(siteView.getSiteId()))) {
			throw new SiteNotfoundException();
		} else {
			SiteEntity siteEntity = new SiteEntity();
			siteEntity.setLandingPage(pageRepository.findOne(pageUrl));
			siteEntity.setParentSiteName(siteView.getParentSiteName());
			siteEntity.setSiteLogo(siteView.getSiteLogo());
			siteEntity.setSiteName(siteView.getSiteName());
			siteEntity.setSiteUrl(siteView.getSiteUrl());
			siteEntity.setSubSite(siteView.getSubSite());
			siteEntity.setPages(siteView.getPages());
			siteEntity.setSiteId(siteView.getSiteId());
			siteRepository.save(siteEntity);
		}
	}

	@Override
	public void addSite(SiteView siteView, Integer siteId) {
		if (Objects.nonNull(siteRepository.findBySiteUrl(siteView.getSiteUrl()))) {
			throw new SiteUrlIsAlreadyExistException();
		}
		SiteEntity siteEntity = new SiteEntity();
		siteEntity.setParentSiteName(siteRepository.findOne(siteId));
		siteEntity.setSiteLogo(siteView.getSiteLogo());
		siteEntity.setSiteName(siteView.getSiteName());
		siteEntity.setSiteUrl(siteView.getSiteUrl());
		siteEntity.setSubSite(siteView.getSubSite());
		siteEntity.setLandingPage(pageRepository.findOne(DEFAULT_PAGE));
		siteRepository.save(siteEntity);
	}

	@Override
	public List<PageEntity> getAllPages(SiteView siteView) {
		if (Objects.isNull(siteRepository.findOne(siteView.getSiteId()))) {
			throw new PageNotFoundException();
		} else {
			return siteRepository.findOne(siteView.getSiteId()).getPages();
		}
	}

	@Override
	public void addSiteLogo(byte[] siteLogo, Integer siteId) {
		SiteEntity siteEntity = siteRepository.findOne(siteId);
		siteEntity.setSiteLogo(siteLogo);
		siteRepository.save(siteEntity);
	}

	@Override
	public void copySiteImage(Integer siteId, OutputStream stream) {
		SiteEntity siteEntity = siteRepository.findOne(siteId);
		if (Objects.isNull(siteEntity))
			throw new SiteNotfoundException();
		byte[] siteLogo = siteEntity.getSiteLogo();
		if (Objects.nonNull(siteLogo)) {
			try {
				stream.write(siteLogo);
			} catch (IOException e) {
				throw new IllegalStateException(e);
			}
		}
	}
	
	@PostConstruct
	public void addRootSite(SiteEntity siteEntity){
		
	}

}
